<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>object&#39;s blog</title>
  <subtitle>编程与生活</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://pengttyy.github.io/"/>
  <updated>2016-11-27T12:27:59.393Z</updated>
  <id>https://pengttyy.github.io/</id>
  
  <author>
    <name>object</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>docker概念及基本用法</title>
    <link href="https://pengttyy.github.io/2016/11/23/docker%E6%A6%82%E5%BF%B5%E5%8F%8A%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
    <id>https://pengttyy.github.io/2016/11/23/docker概念及基本用法/</id>
    <published>2016-11-23T14:44:34.000Z</published>
    <updated>2016-11-27T12:27:59.393Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker概念"><a href="#Docker概念" class="headerlink" title="Docker概念"></a>Docker概念</h2><h3 id="容器技术"><a href="#容器技术" class="headerlink" title="容器技术"></a>容器技术</h3><p>特点：</p>
<ol>
<li>比虚拟化技术更轻量级</li>
<li>资源消耗小</li>
<li>共享系统内核</li>
<li>基于LXC技术构建的容器引擎</li>
<li>核心理念就是 Build once, Run anywhere</li>
</ol>
<h3 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h3><p>类似于虚拟机里的镜像<br>通过Dockerfile创建，也可以通过DockerHub下载</p>
<h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><p>镜像的运行实例，容器之间隔离使用linux的CGroups和Namespaces技术实现，CGroups控制对硬件资源的访问，Namespaces提供环境的隔离。</p>
<h3 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h3><p>类似于maven或者说像git仓库，可以push,pull</p>
<p>##安装</p>
<h3 id="ubuntu"><a href="#ubuntu" class="headerlink" title="ubuntu"></a>ubuntu</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get update</div><div class="line">$ sudo apt-get install docker</div></pre></td></tr></table></figure>
<h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><h4 id="查看Docker-命令"><a href="#查看Docker-命令" class="headerlink" title="查看Docker 命令"></a>查看Docker 命令</h4><h4 id="命令帮助同其它linux-命令-–help"><a href="#命令帮助同其它linux-命令-–help" class="headerlink" title="命令帮助同其它linux 命令 –help"></a>命令帮助同其它linux 命令 –help</h4><h3 id="Docker服务"><a href="#Docker服务" class="headerlink" title="Docker服务"></a>Docker服务</h3><p>docker服务启动选项：<br>/etc/default/docker<br><code>DOCKER_OPTS</code></p>
<h4 id="停止Docker服务"><a href="#停止Docker服务" class="headerlink" title="停止Docker服务"></a>停止Docker服务</h4><p>sudo service docker stop</p>
<h4 id="启动docker服务"><a href="#启动docker服务" class="headerlink" title="启动docker服务"></a>启动docker服务</h4><p>sudo service docker start</p>
<h4 id="查看docker服务状态"><a href="#查看docker服务状态" class="headerlink" title="查看docker服务状态"></a>查看docker服务状态</h4><p>sudo service docker status</p>
<h4 id="docker镜像查找过程"><a href="#docker镜像查找过程" class="headerlink" title="docker镜像查找过程"></a>docker镜像查找过程</h4><p>docker run busybox echo “hello,Shi”<br>busybox:镜像名<br>1.首先本地查找<br>2.从Docker Hub或系统配置的默认Registry中下载</p>
<p>查看镜像<br>docker ps    不包括停止的镜像<br>docker ps -a 查看所有镜像</p>
<h3 id="容器管理"><a href="#容器管理" class="headerlink" title="容器管理"></a>容器管理</h3><h4 id="docker-run"><a href="#docker-run" class="headerlink" title="docker run"></a>docker run</h4><p>创建容器<br><code>$ docker run -t -i ubuntu /bin/bash</code><br>-t：分配一个 pseudo-TTY<br>-i：–interactive参数缩写，表示交互模式，如果没有 attach 保持 STDIN 打开状态<br>ubuntu：运行的镜像名称，默认为latest 标签<br>/bin/bash：容器中运行的应用</p>
<p>退出</p>
<ol>
<li>直接 exit，这时候 bash 程序终止，容器进入到停止状态</li>
<li>使用组合键退出，仍然保持容器运行，我们可以随时回来到这个bash中来，组合键是 <strong>Ctrl-p Ctrl-q</strong>，你没有看错，是两组组合键，先同时按下Ctrl和p，再按Ctrl和q。就可以退出到我们的宿主机了。</li>
</ol>
<h4 id="docker-attach"><a href="#docker-attach" class="headerlink" title="docker attach"></a>docker attach</h4><p>进入正在运行的容器<br><code>docker attach</code></p>
<h4 id="docker-ps"><a href="#docker-ps" class="headerlink" title="docker ps"></a>docker ps</h4><p>查看正在运行的容器</p>
<ul>
<li>-a：查看所有容器，含停止运行的</li>
<li>-l：查看刚启动的容器</li>
<li>-q：只显示容器ID</li>
</ul>
<h4 id="docker-start"><a href="#docker-start" class="headerlink" title="docker start"></a>docker start</h4><p>启动容器</p>
<h4 id="docker-inspect"><a href="#docker-inspect" class="headerlink" title="docker inspect"></a>docker inspect</h4><p>查看 Docker 容器或镜像的一些内部信息</p>
<h4 id="docker-rm"><a href="#docker-rm" class="headerlink" title="docker rm"></a>docker rm</h4><p>删除容器操作。不能删除运行的容器</p>
<h3 id="镜像管理"><a href="#镜像管理" class="headerlink" title="镜像管理"></a>镜像管理</h3><h4 id="docker-images-命令我们可以列出当前系统上所有的镜像信息"><a href="#docker-images-命令我们可以列出当前系统上所有的镜像信息" class="headerlink" title="docker images 命令我们可以列出当前系统上所有的镜像信息"></a>docker images 命令我们可以列出当前系统上所有的镜像信息</h4><h4 id="获取镜像docker-pull-busybox"><a href="#获取镜像docker-pull-busybox" class="headerlink" title="获取镜像docker pull busybox"></a>获取镜像docker pull busybox</h4><h4 id="创建镜像"><a href="#创建镜像" class="headerlink" title="创建镜像"></a>创建镜像</h4><ol>
<li><p>创建Dockerfile文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">from ubuntu:latest</div><div class="line">ENV HOSTNAME=shiyanlou</div></pre></td></tr></table></figure>
</li>
<li><p>执行docker build -t 镜像名 Dockerfile文件目录</p>
</li>
<li>查看docker images</li>
</ol>
<h4 id="清理镜像"><a href="#清理镜像" class="headerlink" title="清理镜像"></a>清理镜像</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	System.out.println(<span class="string">"xxxxxx"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Docker概念&quot;&gt;&lt;a href=&quot;#Docker概念&quot; class=&quot;headerlink&quot; title=&quot;Docker概念&quot;&gt;&lt;/a&gt;Docker概念&lt;/h2&gt;&lt;h3 id=&quot;容器技术&quot;&gt;&lt;a href=&quot;#容器技术&quot; class=&quot;headerlink&quot; 
    
    </summary>
    
    
      <category term="docker" scheme="https://pengttyy.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>hello hexo</title>
    <link href="https://pengttyy.github.io/2016/11/22/hello-hexo/"/>
    <id>https://pengttyy.github.io/2016/11/22/hello-hexo/</id>
    <published>2016-11-22T13:54:16.000Z</published>
    <updated>2016-11-27T12:27:59.393Z</updated>
    
    <content type="html"><![CDATA[<h1 id="test"><a href="#test" class="headerlink" title="test"></a>test</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;test&quot;&gt;&lt;a href=&quot;#test&quot; class=&quot;headerlink&quot; title=&quot;test&quot;&gt;&lt;/a&gt;test&lt;/h1&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>hello hexo</title>
    <link href="https://pengttyy.github.io/2016/11/22/hello-hexo2/"/>
    <id>https://pengttyy.github.io/2016/11/22/hello-hexo2/</id>
    <published>2016-11-22T13:54:16.000Z</published>
    <updated>2016-11-27T12:27:59.393Z</updated>
    
    <content type="html"><![CDATA[<h1 id="test"><a href="#test" class="headerlink" title="test"></a>test</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;test&quot;&gt;&lt;a href=&quot;#test&quot; class=&quot;headerlink&quot; title=&quot;test&quot;&gt;&lt;/a&gt;test&lt;/h1&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
